First Python Program

Let us execute programs in different modes of programming. Interactive Mode Programming: Invoking the interpreter without passing a script file as a parameter brings up the following prompt:

$ python
Python 2.4.3 (#1, Nov 11 2010, 13:34:43)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
Type the following text at the Python prompt and press the Enter:
jrhiuwhguiqwruqherwg
>>> print "Hello, Python!";





If you are running new version of Python, then you need to use print statement with parenthesis as in print ("Hello, Python!");. However in Python version 2.4.3, this produces the following result:

Hello, Python!

Lines and Indentation

Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.

The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example:

if True: print "True"

else:

print "False"

However, the following block generates an error:

if True:

print "Answer"

print "True"

else:

print "Answer"

print "False"

kjvbewbflugbwEL
E;HFUEWGIUFGw;ei
;iufew;gfuigweifguwel

efioh89PEYF903y

r23
t


this is python


Accessing Command-Line Arguments

Python provides a getopt module that helps you parse command-line options and arguments.

$ python test.py arg1 arg2 arg3 The Python sys module provides access to any command-line arguments via the sys.argv. This serves two purposes:

 sys.argv is the list of command-line arguments.  len(sys.argv) is the number of command-line arguments. Here sys.argv[0] is the program i.e. script name.

Example

Consider the following script test.py:
#!/usr/bin/python
import sys
print 'Number of arguments:', len(sys.argv), 'arguments.'
print 'Argument List:', str(sys.argv)
Now run above script as follows:
$ python test.py arg1 arg2 arg3 This produces the following result:

Python
17
Number of arguments: 4 arguments. Argument List: ['test.py', 'arg1', 'arg2', 'arg3']

NOTE: As mentioned above, first argument is always script name and it is also being counted in number of arguments.

Parsing Command-Line Arguments

Python provided a getopt module that helps you parse command-line options and arguments. This module provides two functions and an exception to enable command line argument parsing. getopt.getopt method This method parses command line options and parameter list. Following is simple syntax for this method:

getopt.getopt(args, options[, long_options]) Here is the detail of the parameters:

 args: This is the argument list to be parsed.  options: This is the string of option letters that the script wants to recognize, with options that require an argument should be followed by a colon (:).
 long_options: This is optional parameter and if specified, must be a list of strings with the names of the long options, which should be supported. Long options, which require an argument should be followed by an equal sign ('=').
To accept only long options, options should be an empty string.
 This method returns value consisting of two elements: the first is a list of (option, value) pairs. The second is the list of program arguments left after the option list was stripped.
 Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., '-x') or two hyphens for long options (e.g., '--long-option').


First Python Program

Let us execute programs in different modes of programming. Interactive Mode Programming: Invoking the interpreter without passing a script file as a parameter brings up the following prompt:

$ python
Python 2.4.3 (#1, Nov 11 2010, 13:34:43)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
Type the following text at the Python prompt and press the Enter:

>>> print "Hello, Python!";




If you are running new version of Python, then you need to use print statement with parenthesis as in print ("Hello, Python!");. However in Python version 2.4.3, this produces the following result:

Hello, Python!

Lines and Indentation

Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.

The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example:

if True: print "True"

else:

print "False"

However, the following block generates an error:

if True:

print "Answer"

print "True"

else:

print "Answer"

print "False"

kjvbewbflugbwEL
E;HFUEWGIUFGw;ei
;iufew;gfuigweifguwel

this is python

 23
       

Accessing Command-Line Arguments

Python provides a getopt module that helps you parse command-line options and arguments.

$ python test.py arg1 arg2 arg3 The Python sys module provides access to any command-line arguments via the sys.argv. This serves two purposes:

 sys.argv is the list of command-line arguments.  len(sys.argv) is the number of command-line arguments. Here sys.argv[0] is the program i.e. script name.

Example

Consider the following script test.py:
#!/usr/bin/python
import sys
print 'Number of arguments:', len(sys.argv), 'arguments.'
print 'Argument List:', str(sys.argv)
Now run above script as follows:
$ python test.py arg1 arg2 arg3 This produces the following result:

Python
17
Number of arguments: 4 arguments. Argument List: ['test.py', 'arg1', 'arg2', 'arg3']

NOTE: As mentioned above, first argument is always script name and it is also being counted in number of arguments.

Parsing Command-Line Arguments

Python provided a getopt module that helps you parse command-line options and arguments. This module provides two functions and an exception to enable command line argument parsing. getopt.getopt method This method parses command line options and parameter list. Following is simple syntax for this method:

getopt.getopt(args, options[, long_options]) Here is the detail of the parameters:

 args: This is the argument list to be parsed.  options: This is the string of option letters that the script wants to recognize, with options that require an argument should be followed by a colon (:).
 long_options: This is optional parameter and if specified, must be a list of strings with the names of the long options, which should be supported. Long options, which require an argument should be followed by an equal sign ('=').
To accept only long options, options should be an empty string.
 This method returns value consisting of two elements: the first is a list of (option, value) pairs. The second is the list of program arguments left after the option list was stripped.
 Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., '-x') or two hyphens for long options (e.g., '--long-option').


First Python Program

Let us execute programs in different modes of programming. Interactive Mode Programming: Invoking the interpreter without passing a script file as a parameter brings up the following prompt:

$ python
Python 2.4.3 (#1, Nov 11 2010, 13:34:43)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
Type the following text at the Python prompt and press the Enter:

>>> print "Hello, Python!";




If you are running new version of Python, then you need to use print statement with parenthesis as in print ("Hello, Python!");. However in Python version 2.4.3, this produces the following result:

Hello, Python!

Lines and Indentation

Python provides no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.

The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example:

if True: print "True"

else:

print "False"

However, the following block generates an error:

if True:

print "Answer"

print "True"

else:

print "Answer"

print "False"

kjvbewbflugbwEL
E;HFUEWGIUFGw;ei
;iufew;gfuigweifguwel

this is python

undefined